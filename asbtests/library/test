#!/usr/bin/python

import re
from httplib import HTTPConnection

REDIRECT_MAX = 10

class Test:
    cfg = None
    asbmod = None
    url = None
    fail_abort = None
    check_regex = None
    redirect_loop_count = 0
    reverse_check = None
    regex_match_line = None
    fail_msg = None
    check_enabled = None
    redir_hist = list()
    req_method = None
    post_data = None

    def __init__(self, cfg):
        self.cfg = cfg
        self.asbmod = AnsibleModule(
            argument_spec=dict(
                url=dict(required=True),
                fail_abort=dict(required=False, default=False),
                check_regex=dict(required=False, default=None),
                reverse_check=dict(required=False, default=False),
                check_enabled=dict(required=False, default=True),
                post_data=dict(required=False, default=None),
            ),
            supports_check_mode=False
        )
        self.run()

    def paramsValidate(self):
        if self.check_regex is None:
            self.asbmod.fail_json(msg='check_regex is not set')

    def paramsLoad(self):
        self.url = self.asbmod.params['url']
        self.fail_abort = self.asbmod.boolean(self.asbmod.params['fail_abort'])
        self.check_regex = self.asbmod.params['check_regex']
        self.reverse_check = self.asbmod.boolean(self.asbmod.params['reverse_check'])
        self.check_enabled = self.asbmod.boolean(self.asbmod.params['check_enabled'])
        self.post_data = self.asbmod.params['post_data']
        if self.post_data:
            self.req_method = 'post'
        else:
            self.req_method = 'get'
        self.paramsValidate()

    def redirLocation(self, resp):
        for hk, hv in resp.getheaders():
            if hk.lower() == 'location':
                loc = "/%s" % hv.strip().split('/', 3)[3]
                self.redir_hist.append(loc)
                return loc
        self.fail("redir location not found", force=True)

    def respRedirect(self, resp):
        if self.redirect_loop_count >= REDIRECT_MAX:
            self.asbmod.fail_json(msg="redirect max limit(%d) reached" % REDIRECT_MAX)
        else:
            self.redirect_loop_count += 1
            return self.respGet(self.redirLocation(resp))

    def respCheck(self, resp):
        if resp.status == 301 or resp.status == 302:
            return self.respRedirect(resp)
        elif resp.status != 200:
            self.fail("resp.status -> %d" % resp.status)
        return resp

    def reqGET(self, conn, url):
        conn.request('GET', url)
        return conn.getresponse()

    def reqPOST(self, conn, url):
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'text/plain'
        }
        conn.request('POST', url, self.post_data, headers)
        return conn.getresponse()

    def respGet(self, url=None):
        if url is None: url = self.url
        conn = HTTPConnection(self.cfg['master_fqdn'], self.cfg['master_port'])
        if self.post_data:
            resp = self.reqPOST(conn, url)
        else:
            resp = self.reqGET(conn, url)
        conn.close()
        return self.respCheck(resp)

    def checkRegex(self, body):
        try:
            regex = re.compile(self.check_regex)
        except Exception as e:
            self.asbmod.fail_json(msg="check_regex: %s" % str(e))
        line_nr = 0
        body_size = 0
        for line in body:
            line_nr += 1
            body_size += len(line)
            match = regex.match(line)
            if match:
                self.regex_match_line = line_nr
                if self.reverse_check:
                    self.fail_msg = 'check_regex matched line %d' % line_nr
                return match
        self.fail_msg = 'check_regex did not match, checked %d lines, %d bytes' % (line_nr, body_size)
        return None

    def contentGet(self, resp):
        return resp.read().splitlines()

    def contentParse(self, resp):
        body = self.contentGet(resp)
        check_pass = None
        # check regex
        if self.check_regex:
            check_pass = self.checkRegex(body)
        if check_pass:
            # check passed
            return not self.reverse_check
        else:
            # check failed
            return self.reverse_check

    def fail(self, msg=None, force=False):
        if msg is None:
            flags = list()
            if self.fail_abort: flags.append('abort')
            if self.reverse_check: flags.append('reverse')
            msg = 'FAIL: [%s] %s' % (','.join(flags), self.fail_msg)
        else:
            msg = 'FAIL: %s' % msg
        if self.fail_abort or force:
            self.asbmod.fail_json(msg=msg)
        else:
            self.exit(msg=msg, changed=True)

    def exit(self, msg=None, changed=False):
        if msg is None:
            msg = 'PASS'
        self.asbmod.exit_json(
            changed=changed,
            msg=msg,
            reverse_check=self.reverse_check,
            redirect=self.redirect_loop_count,
            regex_match_line=self.regex_match_line,
            redir_hist=':'.join(self.redir_hist),
            req_method=self.req_method,
        )

    def run(self):
        self.paramsLoad()
        if not self.check_enabled:
            self.exit('DISABLED', True)
        resp = self.respGet()
        if self.contentParse(resp):
            self.exit()
        else:
            self.fail()

from ansible.module_utils.basic import *
if __name__ == '__main__':
    import json
    fh = open('/opt/tsadmdev/webapp/asbtests/config.json', 'r')
    cfg = json.load(fh)
    fh.close()
    Test(cfg)
